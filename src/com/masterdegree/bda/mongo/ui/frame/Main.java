/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.masterdegree.bda.mongo.ui.frame;

import com.masterdegree.bda.mongo.connector.MongoConnection;
import com.masterdegree.bda.mongo.ui.utils.JTableMongoModel;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoIterable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.bson.Document;

/**
 *
 * @author angel_banuelos
 */
public class Main extends javax.swing.JFrame {

    private MongoConnection conn;
    private boolean stop = true;
    private boolean stopInsertion;
    static com.masterdegree.bda.mongo.db.sensors.Main sensorsMain;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tPanels = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        txtUser = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        lblMessage = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cmbDatabases = new javax.swing.JComboBox();
        cmbCollections = new javax.swing.JComboBox();
        btnRead = new javax.swing.JButton();
        txtTimeInSeconds = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnSensors = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        tPanels.setToolTipText("Options\n");
        tPanels.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tPanelsComponentShown(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.25;
        jPanel1.add(txtUser, gridBagConstraints);

        jLabel1.setText("User");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(txtAddress, gridBagConstraints);

        txtPort.setText("27017");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(txtPort, gridBagConstraints);

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        jPanel1.add(btnConnect, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(txtPassword, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(lblMessage, gridBagConstraints);

        tPanels.addTab("Connection", jPanel1);

        jPanel2.setEnabled(false);
        jPanel2.setLayout(new java.awt.GridBagLayout());

        cmbDatabases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDatabasesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(cmbDatabases, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(cmbCollections, gridBagConstraints);

        btnRead.setText("Read");
        btnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel2.add(btnRead, gridBagConstraints);

        txtTimeInSeconds.setText("5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 200, 0, 0);
        jPanel2.add(txtTimeInSeconds, gridBagConstraints);

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        tPanels.addTab("View", jPanel2);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        btnSensors.setText("Start Sensors");
        btnSensors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSensorsActionPerformed(evt);
            }
        });
        jPanel3.add(btnSensors, new java.awt.GridBagConstraints());

        tPanels.addTab("Command", jPanel3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        getContentPane().add(tPanels, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {

            @Override
            public void run() {
                connect();
            }
        }).start();


    }//GEN-LAST:event_btnConnectActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        onCloseWindow();
    }//GEN-LAST:event_formWindowClosed

    private void tPanelsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tPanelsComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_tPanelsComponentShown

    private void cmbDatabasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDatabasesActionPerformed
        // TODO add your handling code here:
        fillCollectons(cmbDatabases.getSelectedItem().toString());
    }//GEN-LAST:event_cmbDatabasesActionPerformed

    private void btnReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadActionPerformed
        // TODO add your handling code here:
        readInterval();
    }//GEN-LAST:event_btnReadActionPerformed

    private void btnSensorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSensorsActionPerformed
        // TODO add your handling code here:
        startSensors();
    }//GEN-LAST:event_btnSensorsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        closeConnection();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnRead;
    private javax.swing.JButton btnSensors;
    private javax.swing.JComboBox cmbCollections;
    private javax.swing.JComboBox cmbDatabases;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JTabbedPane tPanels;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtTimeInSeconds;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void connect() {
        btnConnect.setEnabled(false);
        int port = Integer.parseInt(txtPort.getText());
        try {
            conn = MongoConnection.createInstance(txtUser.getText(), txtPassword.getPassword(), txtAddress.getText(), port);
            if (conn.connection() != null) {
                lblMessage.setText(" Connection Success ");
                fillDatabases();
                tPanels.setSelectedIndex(1);
            }
        } catch (Exception e) {
            lblMessage.setText("Error: " + e.getMessage());
        }
        btnConnect.setEnabled(true);
    }

    public void onCloseWindow() {
        closeConnection();
    }

    public void closeConnection() {
        if (conn != null) {
            if (conn.connection() != null) {
                System.out.println("Connection Closed");
                conn.connection().close();
            }
        }
    }

    private void fillDatabases() {
        MongoIterable<String> dbs = conn.connection().listDatabaseNames();
        StringBuilder databases = new StringBuilder();
        databases.append("Select one...");
        for (String database : dbs) {
            System.out.println("" + database);
            databases.append("," + database);
        }
        cmbDatabases.setModel(new javax.swing.DefaultComboBoxModel(databases.toString().split(",")));
    }

    private void fillCollectons(String database) {
        if (database.equalsIgnoreCase("Select one...")) {
            return;
        }
        System.out.println("database: " + database);
        MongoDatabase db = conn.connection().getDatabase(database);
        MongoIterable<String> colls = db.listCollectionNames();
        StringBuilder collection = new StringBuilder();
        collection.append("Select one...");
        for (String coll : colls) {
            System.out.println("coll: " + coll);
            collection.append("," + coll);
        }
        cmbCollections.setModel(new javax.swing.DefaultComboBoxModel(collection.toString().split(",")));
    }

    private void read() {
        MongoDatabase db = conn.connection().getDatabase(cmbDatabases.getSelectedItem().toString());
        MongoCollection coll = db.getCollection(cmbCollections.getSelectedItem().toString());
        FindIterable<Document> find1 = coll.find();
        JTableMongoModel model;
        try {
            model = new JTableMongoModel(find1);
            tblData.setModel(model);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void readInterval() {
        if (stop) {
            stop = false;
            btnRead.setText("Stop");
            new Thread(new Runnable() {
                @Override
                public void run() {
                    while (!stop) {
                        try {
                            read();
                            int second = Integer.parseInt(txtTimeInSeconds.getText());
                            Thread.sleep(second * 1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }).start();
        } else {
            btnRead.setText("Read");
            stop = true;
        }
    }

    private void startSensors() {
        if (!stopInsertion) {
            stopInsertion = true;
            btnSensors.setText("Stop");
            MongoDatabase db = conn.connection().getDatabase("SENSORS");
            MongoCollection<Document> coll = db.getCollection("DATA");
            sensorsMain = new com.masterdegree.bda.mongo.db.sensors.Main(coll);
            new Thread(sensorsMain).start();
        } else {
            stopInsertion = false;
            btnSensors.setText("Start sensors");
            sensorsMain.stop();
        }
    }
    
    @Override
    protected void finalize() throws Throwable {
        System.out.println("ah! Moriii");
        super.finalize();
    }
}
